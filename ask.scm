(define in #f)
(define out #f)

(define (ask-connect)
  (let ((port (call-with-input-file "port" read)))
    (call-with-values
      (lambda () (socket-client "localhost" port))
      (lambda (i o)
	(set! in i)
	(set! out o)))))

(define (ask question)
  (define (readn n)
    (call/cc
     (lambda (exit)
       (let ((str (make-string n)))
	 (do ((i 0 (+ i 1)))
	     ((= i n) str)
	   (let ((c (read-char in)))
	   (if (eof-object? c)
	       (begin (display "ask: got eof in readn") (exit #f))
	       (string-set! str i c))))))))
  (write question out)
  (newline out)
  (let ((resp (read in)))
    (display "ask: got back ")
    (write resp)
    (newline)
    (if (and (list? resp)
	     (= (length resp) 2)
	     (eq? (car resp) 'raw-string))
	(readn (cadr resp))
	resp)))

(define-syntax add-command
  (syntax-rules ()
    ((add-command name)
     (define (name)
       (ask (list (quote name)))))
    ((add-command name args ...)
     (define (name args ...)
       (ask (list (quote name) args ...))))))

