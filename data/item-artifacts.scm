(define artifact-list
  '(("Demonbane" 'lawful "long sword" 2500 #f)
    ("Excalibur" 'lawful "long sword" 4000 #f)
    ("Grayswandir" 'lawful "silver saber" 8000 #f)
    ("Snickersnee" 'lawful "katana" 1200 #f)
    ("Sunsword" 'lawful "long sword" 1500 #f)
    ("Orb of Detection" 'lawful "crystal ball" 2500 'archaeologist)
    ("Sceptre of Might" 'lawful "mace" 2500 'caveman)
    ("Magic Mirror of Merlin" 'lawful "mirror" 1500 'knight)
    ("Mitre of Holiness" 'lawful "helm of brilliance" 2000 'priest)
    ("Tsurugi of Muramasa" 'lawful "tsurugi" 4500 'samurai)
    ("Cleaver" 'neutral "battle-axe" 1500 #f)
    ("Giantslayer" 'neutral "long sword" 200 #f)
    ("Magicbane" 'neutral "athame" 3500 #f)
    ("Mjollnir" 'neutral "war hammer" 4000 #f)
    ("Vorpal Blade" 'neutral "long sword" 4000 #f)
    ("Heart of Ahriman" 'neutral "luckstone" 2500 'barbarian)
    ("Staff of Aesculapius" 'neutral "quarterstaff" 5000 'healer)
    ("Eyes of the Overworld" 'neutral "lenses" 2500 'monk)
    ("Platinum Yendorian Express Card" 'neutral "credit card" 7000 'tourist)
    ("Orb of Fate" 'neutral "crystal ball" 3500 'valkyrie)
    ("Eye of the Aethiopica" 'neutral "amulet of ESP" 4000 'wizard)
    ("Grimtooth" 'chaotic "orcish dagger" 300 #f)
    ("Orcrist" 'chaotic "elven broadsword" 2000 #f)
    ("Sting" 'chaotic "elven dagger" 800 #f)
    ("Stormbringer" 'chaotic "runesword" 8000 #f)
    ("Longbow of Diana" 'chaotic "bow" 4000 'ranger)
    ("Master Key of Thievery" 'chaotic "skeleton key" 3500 'rogue)
    ("Dragonbane" 'unaligned "broadsword" 500 #f)
    ("Fire Brand" 'unaligned "long sword" 3000 #f)
    ("Frost Brand" 'unaligned "long sword" 3000 #f)
    ("Ogresmasher" 'unaligned "war hammer" 200 #f)
    ("Trollsbane" 'unaligned "morning star" 200 #f)
    ("Werebane" 'unaligned "silver saber" 1500 #f)))

(define (arti-get-field item n)
  (let ((name (item-name item)))
    (let ((e (assoc name artifact-list)))
      (and e (list-ref e n)))))

(define (artifact-valid? item)
  (let ((name (item-name item)))
    (and (char-upper-case? (string-ref name 0))
	 (arti-get-field name 0))))

(define (artifact? item)
  (or (artifact-valid? item)
      (let ((name (item-named item)))
	(and name
	     (artifact-valid? name)
	     (string=? (item-identity (item-name item))
		       (artifact-base-item name))))))

(define (artifact-alignment name) (arti-get-field name 1))
(define (artifact-base-item name) (arti-get-field name 2))
(define (artifact-cost name) (arti-get-field name 3))
(define (quest-artifact? name) (arti-get-field name 4))
(define artifact-role quest-artifact?)
